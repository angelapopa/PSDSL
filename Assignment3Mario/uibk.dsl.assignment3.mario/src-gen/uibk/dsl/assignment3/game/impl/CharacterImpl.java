/**
 * generated by Xtext 2.12.0
 */
package uibk.dsl.assignment3.game.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uibk.dsl.assignment3.game.GamePackage;
import uibk.dsl.assignment3.game.Step;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Character</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uibk.dsl.assignment3.game.impl.CharacterImpl#getHealthPoints <em>Health Points</em>}</li>
 *   <li>{@link uibk.dsl.assignment3.game.impl.CharacterImpl#getActions <em>Actions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CharacterImpl extends IngredientImpl implements uibk.dsl.assignment3.game.Character
{
  /**
   * The default value of the '{@link #getHealthPoints() <em>Health Points</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHealthPoints()
   * @generated
   * @ordered
   */
  protected static final int HEALTH_POINTS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getHealthPoints() <em>Health Points</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHealthPoints()
   * @generated
   * @ordered
   */
  protected int healthPoints = HEALTH_POINTS_EDEFAULT;

  /**
   * The cached value of the '{@link #getActions() <em>Actions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActions()
   * @generated
   * @ordered
   */
  protected EList<Step> actions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CharacterImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GamePackage.Literals.CHARACTER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getHealthPoints()
  {
    return healthPoints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setHealthPoints(int newHealthPoints)
  {
    int oldHealthPoints = healthPoints;
    healthPoints = newHealthPoints;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHARACTER__HEALTH_POINTS, oldHealthPoints, healthPoints));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Step> getActions()
  {
    if (actions == null)
    {
      actions = new EObjectContainmentEList<Step>(Step.class, this, GamePackage.CHARACTER__ACTIONS);
    }
    return actions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GamePackage.CHARACTER__ACTIONS:
        return ((InternalEList<?>)getActions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GamePackage.CHARACTER__HEALTH_POINTS:
        return getHealthPoints();
      case GamePackage.CHARACTER__ACTIONS:
        return getActions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GamePackage.CHARACTER__HEALTH_POINTS:
        setHealthPoints((Integer)newValue);
        return;
      case GamePackage.CHARACTER__ACTIONS:
        getActions().clear();
        getActions().addAll((Collection<? extends Step>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.CHARACTER__HEALTH_POINTS:
        setHealthPoints(HEALTH_POINTS_EDEFAULT);
        return;
      case GamePackage.CHARACTER__ACTIONS:
        getActions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.CHARACTER__HEALTH_POINTS:
        return healthPoints != HEALTH_POINTS_EDEFAULT;
      case GamePackage.CHARACTER__ACTIONS:
        return actions != null && !actions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (healthPoints: ");
    result.append(healthPoints);
    result.append(')');
    return result.toString();
  }

} //CharacterImpl
