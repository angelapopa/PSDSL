/*
 * generated by Xtext 2.12.0
 */
package uibk.dsl.assignment1.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uibk.dsl.assignment1.jsonldConverter.DataType;
import uibk.dsl.assignment1.jsonldConverter.Entity;
import uibk.dsl.assignment1.jsonldConverter.EnumItem;
import uibk.dsl.assignment1.jsonldConverter.JsonldConverterPackage;
import uibk.dsl.assignment1.jsonldConverter.Model;
import uibk.dsl.assignment1.jsonldConverter.Property;
import uibk.dsl.assignment1.services.JsonldConverterGrammarAccess;

@SuppressWarnings("all")
public class JsonldConverterSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private JsonldConverterGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == JsonldConverterPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JsonldConverterPackage.DATA_TYPE:
				sequence_DataType(context, (DataType) semanticObject); 
				return; 
			case JsonldConverterPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case JsonldConverterPackage.ENUM:
				sequence_Enum(context, (uibk.dsl.assignment1.jsonldConverter.Enum) semanticObject); 
				return; 
			case JsonldConverterPackage.ENUM_ITEM:
				sequence_EnumItem(context, (EnumItem) semanticObject); 
				return; 
			case JsonldConverterPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case JsonldConverterPackage.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Type returns DataType
	 *     DataType returns DataType
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_DataType(ISerializationContext context, DataType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonldConverterPackage.Literals.TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonldConverterPackage.Literals.TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Entity
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=ID superType=[Entity|ID]? (features+=Property | features+=Property)*)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnumItem returns EnumItem
	 *
	 * Constraint:
	 *     (name=ID type=STRING)
	 */
	protected void sequence_EnumItem(ISerializationContext context, EnumItem semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonldConverterPackage.Literals.ENUM_ITEM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonldConverterPackage.Literals.ENUM_ITEM__NAME));
			if (transientValues.isValueTransient(semanticObject, JsonldConverterPackage.Literals.ENUM_ITEM__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonldConverterPackage.Literals.ENUM_ITEM__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnumItemAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEnumItemAccess().getTypeSTRINGTerminalRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Enum
	 *     Enum returns Enum
	 *
	 * Constraint:
	 *     (name=ID (features+=EnumItem features+=EnumItem*)?)
	 */
	protected void sequence_Enum(ISerializationContext context, uibk.dsl.assignment1.jsonldConverter.Enum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     elements+=Type+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Property returns Property
	 *
	 * Constraint:
	 *     (name=ID many?='list'? one?='one'? type=[Type|ID])
	 */
	protected void sequence_Property(ISerializationContext context, Property semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
