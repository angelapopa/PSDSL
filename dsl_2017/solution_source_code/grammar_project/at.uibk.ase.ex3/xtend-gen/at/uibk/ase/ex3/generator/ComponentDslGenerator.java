/**
 * generated by Xtext 2.11.0
 */
package at.uibk.ase.ex3.generator;

import at.uibk.ase.ex3.componentDsl.Add;
import at.uibk.ase.ex3.componentDsl.Attribute;
import at.uibk.ase.ex3.componentDsl.AttributeType;
import at.uibk.ase.ex3.componentDsl.BasicType;
import at.uibk.ase.ex3.componentDsl.Create;
import at.uibk.ase.ex3.componentDsl.ElementType;
import at.uibk.ase.ex3.componentDsl.Entity;
import at.uibk.ase.ex3.componentDsl.EntityBaseTypeEnum;
import at.uibk.ase.ex3.componentDsl.EntityType;
import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ComponentDslGenerator extends AbstractGenerator {
  private final String entitiesPackageName = "at.uibk.ase.ex3.transformation.entities";
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final List<Entity> allEntities = IterableExtensions.<Entity>toList(Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class));
    for (final Entity e : allEntities) {
      String _name = e.getName();
      String _plus = ("entities/" + _name);
      String _plus_1 = (_plus + ".java");
      fsa.generateFile(_plus_1, this.compile(e));
    }
    EntityBaseTypeEnum[] _values = EntityBaseTypeEnum.values();
    for (final EntityBaseTypeEnum i : _values) {
      fsa.generateFile((("entities/" + i) + ".java"), this.compile(i));
    }
    final String serviceClassName = "Service";
    fsa.generateFile((("actions/" + serviceClassName) + ".java"), this.generateService(resource, allEntities));
    fsa.generateFile("entities/tests/ComponentTest.java", this.generateComponentTest(resource, serviceClassName, allEntities));
    fsa.generateFile("actions/tests/ServiceTest.java", this.generateServiceTest(resource, serviceClassName, allEntities));
  }
  
  public CharSequence compile(final EntityBaseTypeEnum type) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//generated");
    _builder.newLine();
    _builder.append("package ");
    _builder.append(this.entitiesPackageName);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public interface ");
    _builder.append(type);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public List<Entity> getEntitiesByType(final EntityBaseTypeEnum type, final List<Entity> entities) {
    final List<Entity> foundEntities = CollectionLiterals.<Entity>newArrayList();
    for (final Entity e : entities) {
      EntityBaseTypeEnum _parent = e.getParent();
      boolean _equals = Objects.equal(_parent, type);
      if (_equals) {
        Collections.<Entity>addAll(foundEntities, e);
      }
    }
    return foundEntities;
  }
  
  public List<Add> getAddActions(final Resource resource) {
    final List<Add> foundActions = CollectionLiterals.<Add>newArrayList();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(resource.getAllContents());
    for (final EObject c : _iterable) {
      if ((c instanceof Add)) {
        Collections.<Add>addAll(foundActions, ((Add)c));
      }
    }
    return foundActions;
  }
  
  public List<Create> getCreateActions(final Resource resource) {
    final List<Create> foundActions = CollectionLiterals.<Create>newArrayList();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(resource.getAllContents());
    for (final EObject c : _iterable) {
      if ((c instanceof Create)) {
        InputOutput.<Create>println(((Create)c));
        Collections.<Create>addAll(foundActions, ((Create)c));
      }
    }
    return foundActions;
  }
  
  /**
   * for each action supported by the grammar create a corresponding method
   */
  public CharSequence generateService(final Resource resource, final List<Entity> entities) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//generated");
    _builder.newLine();
    _builder.append("package at.uibk.ase.ex3.transformation.actions;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    {
      for(final Entity entity : entities) {
        _builder.append("import ");
        _builder.append(this.entitiesPackageName);
        _builder.append(".");
        String _name = entity.getName();
        _builder.append(_name);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("public class Service{");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      for(final Entity entity_1 : entities) {
        _builder.append("\t");
        _builder.append("public ");
        String _name_1 = entity_1.getName();
        _builder.append(_name_1, "\t");
        _builder.append(" create");
        String _name_2 = entity_1.getName();
        _builder.append(_name_2, "\t");
        _builder.append("(");
        String _compile = this.compile(entity_1.getAttributes().get(0).getType());
        _builder.append(_compile, "\t");
        _builder.append(" ");
        String _name_3 = entity_1.getAttributes().get(0).getName();
        _builder.append(_name_3, "\t");
        _builder.append(", ");
        String _compile_1 = this.compile(entity_1.getAttributes().get(0).getType());
        _builder.append(_compile_1, "\t");
        _builder.append(" ");
        String _name_4 = entity_1.getAttributes().get(1).getName();
        _builder.append(_name_4, "\t");
        _builder.append("){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return new ");
        String _name_5 = entity_1.getName();
        _builder.append(_name_5, "\t\t");
        _builder.append("(");
        String _name_6 = entity_1.getAttributes().get(0).getName();
        _builder.append(_name_6, "\t\t");
        _builder.append(", ");
        String _name_7 = entity_1.getAttributes().get(1).getName();
        _builder.append(_name_7, "\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    {
      List<Entity> _entitiesByType = this.getEntitiesByType(EntityBaseTypeEnum.GROUP, entities);
      for(final Entity g : _entitiesByType) {
        {
          List<Entity> _entitiesByType_1 = this.getEntitiesByType(EntityBaseTypeEnum.MEMBER, entities);
          for(final Entity m : _entitiesByType_1) {
            _builder.append("\t");
            _builder.append("public void add");
            _builder.append(EntityBaseTypeEnum.MEMBER, "\t");
            _builder.append("To");
            _builder.append(EntityBaseTypeEnum.GROUP, "\t");
            _builder.append("(");
            String _name_8 = m.getName();
            _builder.append(_name_8, "\t");
            _builder.append(" member, ");
            String _name_9 = g.getName();
            _builder.append(_name_9, "\t");
            _builder.append(" group){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("group.add(member);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      for(final Entity entity_2 : entities) {
        {
          EntityBaseTypeEnum _parent = entity_2.getParent();
          boolean _equals = Objects.equal(_parent, EntityBaseTypeEnum.GROUP);
          if (_equals) {
            _builder.append("\t");
            final Attribute a = this.getArrayAttribute(entity_2);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("public List<");
            String _typeToString = this.typeToString(a.getType().getElementType());
            _builder.append(_typeToString, "\t");
            _builder.append("> getOrder(");
            String _name_10 = entity_2.getName();
            _builder.append(_name_10, "\t");
            _builder.append(" c){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("throw new UnsupportedOperationException(\"Not implemented!\");");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean isRightDependency(Project p1, Project p2){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Project p : p1.getDependencies()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(p.getName().equals(p2.getName()) && p.getVersion().equals(p2.getVersion())){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean isLeftDependency(Project p1, Project p2){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Project p : p2.getDependencies()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(p.getName().equals(p1.getName()) && p.getVersion().equals(p1.getVersion())){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      for(final Entity entity_3 : entities) {
        {
          EntityBaseTypeEnum _parent_1 = entity_3.getParent();
          boolean _equals_1 = Objects.equal(_parent_1, EntityBaseTypeEnum.GROUP);
          if (_equals_1) {
            _builder.append("\t");
            _builder.append("public boolean hasCycles(");
            String _name_11 = entity_3.getName();
            _builder.append(_name_11, "\t");
            _builder.append(" c1, ");
            String _name_12 = entity_3.getName();
            _builder.append(_name_12, "\t");
            _builder.append(" c2){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("boolean right = false;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("boolean left = false;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("for (Project p1 : c1.getProjects()){");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("for (Project p2 : c2.getProjects()){");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("right = right || isRightDependency(p1, p2);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("left = left || isLeftDependency(p1, p2);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("return right && left;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public Attribute getArrayAttribute(final Entity entity) {
    EList<Attribute> _attributes = entity.getAttributes();
    for (final Attribute attribute : _attributes) {
      boolean _isArray = attribute.getType().isArray();
      if (_isArray) {
        return attribute;
      }
    }
    return null;
  }
  
  public CharSequence compile(final Entity entity) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//generated");
    _builder.newLine();
    _builder.append("package ");
    _builder.append(this.entitiesPackageName);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import ");
    _builder.append(this.entitiesPackageName);
    _builder.append(".");
    EntityBaseTypeEnum _parent = entity.getParent();
    _builder.append(_parent);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class ");
    String _name = entity.getName();
    _builder.append(_name);
    _builder.append(" ");
    {
      EntityBaseTypeEnum _parent_1 = entity.getParent();
      boolean _tripleNotEquals = (_parent_1 != null);
      if (_tripleNotEquals) {
        _builder.append("implements ");
        EntityBaseTypeEnum _parent_2 = entity.getParent();
        _builder.append(_parent_2);
      }
    }
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    {
      EList<Attribute> _attributes = entity.getAttributes();
      for(final Attribute attribute : _attributes) {
        _builder.append("\t");
        _builder.append("private ");
        String _compile = this.compile(attribute.getType());
        _builder.append(_compile, "\t");
        _builder.append(" ");
        String _name_1 = attribute.getName();
        _builder.append(_name_1, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//constructor");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name_2 = entity.getName();
    _builder.append(_name_2, "\t");
    _builder.append("(");
    String _compile_1 = this.compile(entity.getAttributes().get(0).getType());
    _builder.append(_compile_1, "\t");
    _builder.append(" ");
    String _name_3 = entity.getAttributes().get(0).getName();
    _builder.append(_name_3, "\t");
    _builder.append(", ");
    String _compile_2 = this.compile(entity.getAttributes().get(0).getType());
    _builder.append(_compile_2, "\t");
    _builder.append(" ");
    String _name_4 = entity.getAttributes().get(1).getName();
    _builder.append(_name_4, "\t");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.");
    String _name_5 = entity.getAttributes().get(0).getName();
    _builder.append(_name_5, "\t\t");
    _builder.append(" = ");
    String _name_6 = entity.getAttributes().get(0).getName();
    _builder.append(_name_6, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.");
    String _name_7 = entity.getAttributes().get(1).getName();
    _builder.append(_name_7, "\t\t");
    _builder.append("=");
    String _name_8 = entity.getAttributes().get(1).getName();
    _builder.append(_name_8, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      EntityBaseTypeEnum _parent_3 = entity.getParent();
      boolean _equals = Objects.equal(_parent_3, EntityBaseTypeEnum.GROUP);
      if (_equals) {
        {
          EList<Attribute> _attributes_1 = entity.getAttributes();
          for(final Attribute attribute_1 : _attributes_1) {
            {
              boolean _isArray = attribute_1.getType().isArray();
              if (_isArray) {
                _builder.append("\t");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("//methods");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("public void add(");
                String _typeToString = this.typeToString(attribute_1.getType().getElementType());
                _builder.append(_typeToString, "\t");
                _builder.append(" element){");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("get");
                String _firstUpper = StringExtensions.toFirstUpper(attribute_1.getName());
                _builder.append(_firstUpper, "\t\t");
                _builder.append("().add(element);");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EntityBaseTypeEnum _parent_4 = entity.getParent();
      boolean _equals_1 = Objects.equal(_parent_4, EntityBaseTypeEnum.GROUP);
      if (_equals_1) {
        _builder.append("\t");
        final Attribute a = this.getArrayAttribute(entity);
        _builder.newLineIfNotEmpty();
        {
          if ((a != null)) {
            _builder.append("\t");
            _builder.append("public int getSize(){");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("if (");
            String _name_9 = a.getName();
            _builder.append(_name_9, "\t\t");
            _builder.append(" == null){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("return 0;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("return ");
            String _name_10 = a.getName();
            _builder.append(_name_10, "\t\t");
            _builder.append(".size();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    {
      EntityBaseTypeEnum _parent_5 = entity.getParent();
      boolean _equals_2 = Objects.equal(_parent_5, EntityBaseTypeEnum.MEMBER);
      if (_equals_2) {
        _builder.append("\t");
        final Attribute a_1 = this.getArrayAttribute(entity);
        _builder.newLineIfNotEmpty();
        {
          if ((a_1 != null)) {
            _builder.append("\t");
            _builder.append("//methods");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("public void addDependency(");
            String _typeToString_1 = this.typeToString(a_1.getType().getElementType());
            _builder.append(_typeToString_1, "\t");
            _builder.append(" element){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("get");
            String _firstUpper_1 = StringExtensions.toFirstUpper(a_1.getName());
            _builder.append(_firstUpper_1, "\t\t");
            _builder.append("().add(element);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//getters and setters");
    _builder.newLine();
    {
      EList<Attribute> _attributes_2 = entity.getAttributes();
      for(final Attribute attribute_2 : _attributes_2) {
        _builder.append("\t");
        _builder.append("public ");
        String _compile_3 = this.compile(attribute_2.getType());
        _builder.append(_compile_3, "\t");
        _builder.append(" get");
        String _firstUpper_2 = StringExtensions.toFirstUpper(attribute_2.getName());
        _builder.append(_firstUpper_2, "\t");
        _builder.append("(){");
        _builder.newLineIfNotEmpty();
        {
          boolean _isArray_1 = attribute_2.getType().isArray();
          if (_isArray_1) {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("if (");
            String _name_11 = attribute_2.getName();
            _builder.append(_name_11, "\t\t");
            _builder.append(" == null){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("\t");
            String _name_12 = attribute_2.getName();
            _builder.append(_name_12, "\t\t\t");
            _builder.append(" = new ArrayList<");
            String _typeToString_2 = this.typeToString(attribute_2.getType().getElementType());
            _builder.append(_typeToString_2, "\t\t\t");
            _builder.append(">();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return ");
        String _name_13 = attribute_2.getName();
        _builder.append(_name_13, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public void set");
        String _firstUpper_3 = StringExtensions.toFirstUpper(attribute_2.getName());
        _builder.append(_firstUpper_3, "\t");
        _builder.append("(");
        String _compile_4 = this.compile(attribute_2.getType());
        _builder.append(_compile_4, "\t");
        _builder.append(" _arg) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("this.");
        String _name_14 = attribute_2.getName();
        _builder.append(_name_14, "\t\t");
        _builder.append(" = _arg;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String compile(final AttributeType attributeType) {
    String _xifexpression = null;
    boolean _isArray = attributeType.isArray();
    if (_isArray) {
      String _typeToString = this.typeToString(attributeType.getElementType());
      String _plus = ("List<" + _typeToString);
      _xifexpression = (_plus + ">");
    } else {
      _xifexpression = this.typeToString(attributeType.getElementType());
    }
    return _xifexpression;
  }
  
  protected String _typeToString(final BasicType type) {
    String _xifexpression = null;
    String _typeName = type.getTypeName();
    boolean _equals = Objects.equal(_typeName, "string");
    if (_equals) {
      _xifexpression = "String";
    } else {
      _xifexpression = type.getTypeName();
    }
    return _xifexpression;
  }
  
  protected String _typeToString(final EntityType type) {
    return type.getEntity().getName();
  }
  
  public CharSequence generateComponentTest(final Resource resource, final String serviceClassName, final List<Entity> entities) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//generated");
    _builder.newLine();
    _builder.append("package at.uibk.ase.ex3.transformation.actions;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import static org.junit.Assert.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.junit.Before;");
    _builder.newLine();
    _builder.append("import org.junit.Test;");
    _builder.newLine();
    _builder.newLine();
    {
      for(final Entity entity : entities) {
        _builder.append("import ");
        _builder.append(this.entitiesPackageName);
        _builder.append(".");
        String _name = entity.getName();
        _builder.append(_name);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("public class ComponentTest {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    _builder.append(serviceClassName, "\t");
    _builder.append(" service = new ");
    _builder.append(serviceClassName, "\t");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private List<Component> components = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Before");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void setup(){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//FIXME create action is not like the rest actions; extracting entity types not possible");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Component c1 = service.createComponent(\"component1\", \"1.0.0\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Component c2 = service.createComponent(\"component2\", \"2.0.0\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Project p1 = service.createProject(\"project1\", \"1.9.0\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Project p2 = service.createProject(\"project2\", \"1.0.0\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("c1.add(p1);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("c1.add(p2);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("components.add(c1);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("components.add(c2);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Test");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void testSize(){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("assertEquals(2, components.get(0).getSize());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("assertEquals(0, components.get(1).getSize());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateServiceTest(final Resource resource, final String serviceClassName, final List<Entity> entities) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//generated");
    _builder.newLine();
    _builder.append("package at.uibk.ase.ex3.transformation.actions;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import static org.junit.Assert.*;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.junit.Test;");
    _builder.newLine();
    _builder.newLine();
    {
      for(final Entity entity : entities) {
        _builder.append("import ");
        _builder.append(this.entitiesPackageName);
        _builder.append(".");
        String _name = entity.getName();
        _builder.append(_name);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(serviceClassName);
    _builder.append("Test {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private ");
    _builder.append(serviceClassName, "\t");
    _builder.append(" service = new ");
    _builder.append(serviceClassName, "\t");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Test");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void testCreate(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String name = \"component1\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String version = \"1.0.0\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Component c = service.createComponent(name, version);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(name, c.getName());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(version, c.getVersion());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//FIXME take created components and check cycle dependencies");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Test");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void testCycleValid(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Component c1 = service.createComponent(\"component1\", \"1.0.0\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Component c2 = service.createComponent(\"component2\", \"2.0.0\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Project p1 = service.createProject(\"project1\", \"1.9.0\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Project p2 = service.createProject(\"project2\", \"1.0.0\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("c1.add(p1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("c1.add(p2);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertFalse(service.hasCycles(c1, c2));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//FIXME take created components and check cycle dependencies");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Test");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void testCycleInvalid(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Component c1 = service.createComponent(\"component1\", \"1.0.0\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Component c2 = service.createComponent(\"component2\", \"2.0.0\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Project p1 = service.createProject(\"project1\", \"1.9.0\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Project p2 = service.createProject(\"project2\", \"1.0.0\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Project p4 = service.createProject(\"project4\", \"1.9.0\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("p2.addDependency(p1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("p4.addDependency(p2);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("c1.add(p1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("c1.add(p4);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("c2.add(p2);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertTrue(service.hasCycles(c1, c2));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Test");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void testOrder(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//FIXME get created entities");
    _builder.newLine();
    _builder.append("\t\t");
    final ArrayList<String> projects = CollectionLiterals.<String>newArrayList("project1", "project2");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    final String c1 = "c1";
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    final String cName = "component1";
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    final String cValue = "1.0.0";
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("Component ");
    _builder.append(c1, "\t\t");
    _builder.append(" = service.createComponent(\"");
    _builder.append(cName, "\t\t");
    _builder.append("\", \"");
    _builder.append(cValue, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("Project p1 = service.createProject(\"project1\", \"1.9.0\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Project p2 = service.createProject(\"project2\", \"1.0.0\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//END FIXME");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    final List<Add> addActions = this.getAddActions(resource);
    _builder.newLineIfNotEmpty();
    {
      for(final Add a : addActions) {
        {
          boolean _equals = a.getDestinationName().equals(cName);
          if (_equals) {
            {
              for(final String p : projects) {
                _builder.append("\t\t");
                _builder.append(c1, "\t\t");
                _builder.append(".add(p");
                int _indexOf = projects.indexOf(p);
                int _plus = (_indexOf + 1);
                _builder.append(_plus, "\t\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("p2.addDependency(p1);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<Project> projects = service.getOrder(");
    _builder.append(c1, "\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"");
    String _get = projects.get(0);
    _builder.append(_get, "\t\t");
    _builder.append("\", projects.get(0).getName());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"");
    String _get_1 = projects.get(1);
    _builder.append(_get_1, "\t\t");
    _builder.append("\", projects.get(1).getName());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Test(expected = Exception.class)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void testOrderEmpty(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("service.getOrder(service.createComponent(\"component2\", \"2.0.0\"));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String typeToString(final ElementType type) {
    if (type instanceof EntityType) {
      return _typeToString((EntityType)type);
    } else if (type instanceof BasicType) {
      return _typeToString((BasicType)type);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(type).toString());
    }
  }
}
