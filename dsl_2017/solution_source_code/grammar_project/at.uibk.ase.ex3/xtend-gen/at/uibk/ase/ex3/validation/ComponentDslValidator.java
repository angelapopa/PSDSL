/**
 * generated by Xtext 2.11.0
 */
package at.uibk.ase.ex3.validation;

import at.uibk.ase.ex3.componentDsl.Action;
import at.uibk.ase.ex3.componentDsl.Add;
import at.uibk.ase.ex3.componentDsl.AddDependency;
import at.uibk.ase.ex3.componentDsl.ComponentDslPackage;
import at.uibk.ase.ex3.componentDsl.Create;
import at.uibk.ase.ex3.componentDsl.Cycle;
import at.uibk.ase.ex3.componentDsl.EntityBaseTypeEnum;
import at.uibk.ase.ex3.componentDsl.EntityType;
import at.uibk.ase.ex3.componentDsl.Order;
import at.uibk.ase.ex3.componentDsl.Size;
import at.uibk.ase.ex3.validation.AbstractComponentDslValidator;
import com.google.common.base.Objects;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class ComponentDslValidator extends AbstractComponentDslValidator {
  public final static String COMPONENT = "component";
  
  public final static String INVALID_NAME = "invalidDependency";
  
  public final static String INVALID_DEPENDENCY_MSG = "Invalid dependency assignment. Only dependencies between members can be defined.";
  
  public final static String INVALID_ASSIGNMENT_SOURCE_MSG = "Invalid assignment. Only members can be assigned.";
  
  public final static String INVALID_ASSIGNMENT_DEST_MSG = "Invalid assignment.";
  
  public final static String INVALID_ASSIGNMENT_NON_EXISTING_MEMBER_NAME_VERSION = "A member with this name and version was not yet created.";
  
  public final static String INVALID_ASSIGNMENT_NON_EXISTING_GROUP_NAME = "A group with this name was not yet created.";
  
  public final static String INVALID_ASSIGNMENT_NON_EXISTING_GROUP_VERSION = "A group with this version was not yet created.";
  
  public final static String INVALID_ASSIGNMENT_EXISTING_MEMBER_NAME = "A member with the same name exists already in this group.";
  
  public final static String INVALID_ASSIGNMENT_INVALID_VERSION = "All members of this group should have the same version.";
  
  public final static String INVALID_ACTION_USAGE = "This action can be computed only for groups.";
  
  public final static String INVALID_CREATION_MEMBER_VERSION = "This member cannot exist in different versions.";
  
  public final static String INVALID_CREATION_GROUP_VERSION = "This group cannot exist in different versions.";
  
  @Check
  public void checkDependencyAssignmentSource(final AddDependency addDependency) {
    EntityBaseTypeEnum _parent = addDependency.getSource().getEntity().getParent();
    boolean _equals = Objects.equal(_parent, EntityBaseTypeEnum.GROUP);
    if (_equals) {
      this.error(ComponentDslValidator.INVALID_DEPENDENCY_MSG, ComponentDslPackage.eINSTANCE.getAddDependency_Source(), ComponentDslValidator.INVALID_NAME);
    }
  }
  
  @Check
  public void checkDependencyAssignmentDestination(final AddDependency addDependency) {
    EntityBaseTypeEnum _parent = addDependency.getDest().getEntity().getParent();
    boolean _equals = Objects.equal(_parent, EntityBaseTypeEnum.GROUP);
    if (_equals) {
      this.error(ComponentDslValidator.INVALID_DEPENDENCY_MSG, ComponentDslPackage.eINSTANCE.getAddDependency_Dest(), ComponentDslValidator.INVALID_NAME);
    }
  }
  
  @Check
  public void checkAssignmentSourceType(final Add addAction) {
    EntityBaseTypeEnum _parent = addAction.getSource().getEntity().getParent();
    boolean _equals = Objects.equal(_parent, EntityBaseTypeEnum.GROUP);
    if (_equals) {
      this.error(ComponentDslValidator.INVALID_ASSIGNMENT_SOURCE_MSG, ComponentDslPackage.eINSTANCE.getAdd_Source(), ComponentDslValidator.INVALID_NAME);
    }
  }
  
  @Check
  public void checkAssignmentDestType(final Add addAction) {
    EntityBaseTypeEnum _parent = addAction.getDest().getEntity().getParent();
    boolean _equals = Objects.equal(_parent, EntityBaseTypeEnum.MEMBER);
    if (_equals) {
      this.error(ComponentDslValidator.INVALID_ASSIGNMENT_DEST_MSG, ComponentDslPackage.eINSTANCE.getAdd_Dest(), ComponentDslValidator.INVALID_NAME);
    }
  }
  
  public ArrayList<EntityType> getAllProjects(final List<Object> candidates) {
    final ArrayList<EntityType> projects = new ArrayList<EntityType>();
    for (final Object c : candidates) {
      if ((c instanceof EntityType)) {
        final EntityType proj = ((EntityType) c);
        if ((Objects.equal(proj.getEntity().getParent(), EntityBaseTypeEnum.MEMBER) && (proj.getName() != null))) {
          projects.add(((EntityType)c));
        }
      }
    }
    return projects;
  }
  
  public ArrayList<EntityType> getAllComponents(final List<Object> candidates) {
    final ArrayList<EntityType> components = new ArrayList<EntityType>();
    for (final Object c : candidates) {
      if ((c instanceof EntityType)) {
        final EntityType proj = ((EntityType) c);
        if ((Objects.equal(proj.getEntity().getParent(), EntityBaseTypeEnum.GROUP) && (proj.getName() != null))) {
          components.add(((EntityType)c));
        }
      }
    }
    return components;
  }
  
  public void validateExistingGroupVersions(final Create createAction, final List<Object> candidates) {
    final ArrayList<EntityType> components = this.getAllComponents(candidates);
    for (final EntityType p : components) {
      for (final EntityType f : components) {
        boolean _identityEquals = (p == f);
        boolean _not = (!_identityEquals);
        if (_not) {
          if ((p.getName().equals(f.getName()) && p.getVersion().equals(f.getVersion()))) {
            String _name = p.getName();
            String _plus = (_name + " ");
            String _version = p.getVersion();
            String _plus_1 = (_plus + _version);
            String _plus_2 = (_plus_1 + " == ");
            String _name_1 = f.getName();
            String _plus_3 = (_plus_2 + _name_1);
            String _plus_4 = (_plus_3 + " ");
            String _version_1 = f.getVersion();
            String _plus_5 = (_plus_4 + _version_1);
            InputOutput.<String>println(_plus_5);
            String _name_2 = p.getName();
            String _plus_6 = (_name_2 + ": ");
            String _plus_7 = (_plus_6 + ComponentDslValidator.INVALID_CREATION_GROUP_VERSION);
            InputOutput.<String>println(_plus_7);
          }
        }
      }
    }
  }
  
  public void validateExistingMemberVersions(final Create createAction, final List<Object> candidates) {
    final ArrayList<EntityType> projects = this.getAllProjects(candidates);
    for (final EntityType p : projects) {
      for (final EntityType f : projects) {
        boolean _identityEquals = (p == f);
        boolean _not = (!_identityEquals);
        if (_not) {
          if ((p.getName().equals(f.getName()) && p.getVersion().equals(f.getVersion()))) {
            String _name = p.getName();
            String _plus = (_name + " ");
            String _version = p.getVersion();
            String _plus_1 = (_plus + _version);
            String _plus_2 = (_plus_1 + " == ");
            String _name_1 = f.getName();
            String _plus_3 = (_plus_2 + _name_1);
            String _plus_4 = (_plus_3 + " ");
            String _version_1 = f.getVersion();
            String _plus_5 = (_plus_4 + _version_1);
            InputOutput.<String>println(_plus_5);
            String _name_2 = p.getName();
            String _plus_6 = (_name_2 + ": ");
            String _plus_7 = (_plus_6 + ComponentDslValidator.INVALID_CREATION_MEMBER_VERSION);
            InputOutput.<String>println(_plus_7);
          }
        }
      }
    }
  }
  
  public void validateExistingProjects(final Add addAction, final List<Object> candidates) {
    boolean foundEntity = false;
    final ArrayList<EntityType> projects = this.getAllProjects(candidates);
    for (final EntityType p : projects) {
      if ((Objects.equal(addAction.getSourceName(), p.getName()) && Objects.equal(addAction.getSourceVersion(), p.getVersion()))) {
        foundEntity = true;
      }
    }
    if ((!foundEntity)) {
      this.error(ComponentDslValidator.INVALID_ASSIGNMENT_NON_EXISTING_MEMBER_NAME_VERSION, ComponentDslPackage.eINSTANCE.getAdd_Source(), 
        ComponentDslValidator.INVALID_NAME);
    }
  }
  
  public void validateExistingComponents(final Add addAction, final List<Object> candidates) {
    boolean foundEntity = false;
    boolean foundVersion = false;
    final ArrayList<EntityType> components = this.getAllComponents(candidates);
    for (final EntityType c : components) {
      {
        String _destinationName = addAction.getDestinationName();
        String _name = c.getName();
        boolean _equals = Objects.equal(_destinationName, _name);
        if (_equals) {
          foundEntity = true;
        }
        String _destinationVersion = addAction.getDestinationVersion();
        String _version = c.getVersion();
        boolean _equals_1 = Objects.equal(_destinationVersion, _version);
        if (_equals_1) {
          foundVersion = true;
        }
      }
    }
    if ((!foundEntity)) {
      this.error(ComponentDslValidator.INVALID_ASSIGNMENT_NON_EXISTING_GROUP_NAME, ComponentDslPackage.eINSTANCE.getAdd_DestinationName(), 
        ComponentDslValidator.INVALID_NAME);
    }
    if ((!foundVersion)) {
      this.error(ComponentDslValidator.INVALID_ASSIGNMENT_NON_EXISTING_GROUP_VERSION, ComponentDslPackage.eINSTANCE.getAdd_DestinationVersion(), 
        ComponentDslValidator.INVALID_NAME);
    }
  }
  
  public void validateExistingComponents(final Action action, final String name, final String version, final EReference instance) {
    final EObject rootElement = EcoreUtil2.getRootContainer(action);
    final TreeIterator<Object> candidates = EcoreUtil2.<Object>getAllProperContents(rootElement, false);
    List<Object> allEntities = IteratorExtensions.<Object>toList(candidates);
    boolean foundEntity = false;
    final ArrayList<EntityType> components = this.getAllComponents(allEntities);
    for (final EntityType c : components) {
      if ((Objects.equal(name, c.getName()) && Objects.equal(version, c.getVersion()))) {
        foundEntity = true;
      }
    }
    if ((!foundEntity)) {
      this.error(ComponentDslValidator.INVALID_ASSIGNMENT_NON_EXISTING_GROUP_NAME, instance, ComponentDslValidator.INVALID_NAME);
    }
  }
  
  @Check
  public void checkCreateNewVersions(final Create createAction) {
    final EObject rootElement = EcoreUtil2.getRootContainer(createAction);
    final TreeIterator<Object> candidates = EcoreUtil2.<Object>getAllProperContents(rootElement, false);
    List<Object> allEntities = IteratorExtensions.<Object>toList(candidates);
    this.validateExistingMemberVersions(createAction, allEntities);
    this.validateExistingGroupVersions(createAction, allEntities);
  }
  
  @Check
  public void checkAddExistingMembersAndGroups(final Add addAction) {
    final EObject rootElement = EcoreUtil2.getRootContainer(addAction);
    final TreeIterator<Object> candidates = EcoreUtil2.<Object>getAllProperContents(rootElement, false);
    List<Object> allEntities = IteratorExtensions.<Object>toList(candidates);
    this.validateExistingProjects(addAction, allEntities);
    this.validateExistingComponents(addAction, allEntities);
  }
  
  @Check
  public void checkAssignmentMemberUniqueness(final Add addAction) {
    final EObject rootElement = EcoreUtil2.getRootContainer(addAction);
    final List<Add> addActions = EcoreUtil2.<Add>getAllContentsOfType(rootElement, Add.class);
    for (final Add action : addActions) {
      boolean _identityEquals = (action == addAction);
      boolean _not = (!_identityEquals);
      if (_not) {
        boolean _equalsIgnoreCase = action.getDestinationName().equalsIgnoreCase(addAction.getDestinationName());
        if (_equalsIgnoreCase) {
          boolean _equalsIgnoreCase_1 = action.getSourceName().equalsIgnoreCase(addAction.getSourceName());
          if (_equalsIgnoreCase_1) {
            this.error(ComponentDslValidator.INVALID_ASSIGNMENT_EXISTING_MEMBER_NAME, ComponentDslPackage.eINSTANCE.getAdd_SourceName(), 
              ComponentDslValidator.INVALID_NAME);
          }
        }
      }
    }
  }
  
  @Check
  public void checkAssignmentSameVersionOfMembersInGroup(final Add addAction) {
    final EObject rootElement = EcoreUtil2.getRootContainer(addAction);
    final List<Add> addActions = EcoreUtil2.<Add>getAllContentsOfType(rootElement, Add.class);
    for (final Add action : addActions) {
      boolean _identityEquals = (action == addAction);
      boolean _not = (!_identityEquals);
      if (_not) {
        boolean _equalsIgnoreCase = action.getDestinationName().equalsIgnoreCase(addAction.getDestinationName());
        if (_equalsIgnoreCase) {
          boolean _equalsIgnoreCase_1 = action.getSourceVersion().equalsIgnoreCase(addAction.getSourceVersion());
          boolean _not_1 = (!_equalsIgnoreCase_1);
          if (_not_1) {
            this.error(ComponentDslValidator.INVALID_ASSIGNMENT_INVALID_VERSION, ComponentDslPackage.eINSTANCE.getAdd_SourceVersion(), 
              ComponentDslValidator.INVALID_NAME);
          }
        }
      }
    }
  }
  
  @Check
  public void checkUsage(final Size sizeAction) {
    EntityBaseTypeEnum _parent = sizeAction.getSource().getEntity().getParent();
    boolean _equals = Objects.equal(_parent, EntityBaseTypeEnum.MEMBER);
    if (_equals) {
      this.error(ComponentDslValidator.INVALID_ACTION_USAGE, ComponentDslPackage.eINSTANCE.getSize_Source(), ComponentDslValidator.INVALID_NAME);
    } else {
      this.validateExistingComponents(sizeAction, sizeAction.getSourceName(), sizeAction.getSourceVersion(), ComponentDslPackage.eINSTANCE.getSize_Source());
    }
  }
  
  @Check
  public void checkUsage(final Order orderAction) {
    EntityBaseTypeEnum _parent = orderAction.getSource().getEntity().getParent();
    boolean _equals = Objects.equal(_parent, EntityBaseTypeEnum.MEMBER);
    if (_equals) {
      this.error(ComponentDslValidator.INVALID_ACTION_USAGE, ComponentDslPackage.eINSTANCE.getOrder_Source(), ComponentDslValidator.INVALID_NAME);
    } else {
      this.validateExistingComponents(orderAction, orderAction.getSourceName(), orderAction.getSourceVersion(), ComponentDslPackage.eINSTANCE.getOrder_Source());
    }
  }
  
  @Check
  public void checkUsage(final Cycle cycleAction) {
    EntityBaseTypeEnum _parent = cycleAction.getSource().getEntity().getParent();
    boolean _equals = Objects.equal(_parent, EntityBaseTypeEnum.MEMBER);
    if (_equals) {
      this.error(ComponentDslValidator.INVALID_ACTION_USAGE, ComponentDslPackage.eINSTANCE.getCycle_Source(), ComponentDslValidator.INVALID_NAME);
      return;
    }
    EntityBaseTypeEnum _parent_1 = cycleAction.getDest().getEntity().getParent();
    boolean _equals_1 = Objects.equal(_parent_1, EntityBaseTypeEnum.MEMBER);
    if (_equals_1) {
      this.error(ComponentDslValidator.INVALID_ACTION_USAGE, ComponentDslPackage.eINSTANCE.getCycle_Dest(), ComponentDslValidator.INVALID_NAME);
      return;
    }
    this.validateExistingComponents(cycleAction, cycleAction.getSourceName(), cycleAction.getSourceVersion(), ComponentDslPackage.eINSTANCE.getCycle_Source());
    this.validateExistingComponents(cycleAction, cycleAction.getDestinationName(), cycleAction.getDestinationVersion(), ComponentDslPackage.eINSTANCE.getCycle_Dest());
  }
}
